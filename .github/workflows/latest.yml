name: Build latest release

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tag
        id: vars
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_TAG=$(gh release list --limit 1 --repo zed-industries/zed --exclude-drafts --exclude-pre-releases --json tagName --jq '.[0].tagName')
          echo "Latest tag: $LATEST_TAG"
          echo "tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"

      - name: Check latest tag
        id: check_tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG_EXISTS=$(git tag -l "${{ steps.vars.outputs.tag }}")
          if [ -z "$TAG_EXISTS" ]; then
            echo "Tag exists."
            exit 1
          else
            echo "Tag does not exist."
          fi

      - name: Cancel workflow if tag exists
        if: steps.check_tag.conclusion == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const { GITHUB_RUN_ID } = process.env;
            await github.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: GITHUB_RUN_ID
            });

  build:
    runs-on: windows-latest

    needs: prepare

    steps:
      - run: echo "Building ${{needs.prepare.outputs.tag}}"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          clean: false
          repository: zed-industries/zed
          ref: ${{needs.prepare.outputs.tag}}

      - name: Setup build tools
        run: |
          rustc --version
          cargo --version
          rustup target add wasm32-wasi

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build latest
        run: cargo build --release --locked --package zed

      - name: Install cargo get package
        run: cargo install cargo-get

      - name: Get vars
        id: vars
        run: |
          $HASH = (git rev-parse HEAD).Substring(0,9)
          echo "HASH: ${HASH}"
          Write-Output "hash=${HASH}" >> $Env:GITHUB_OUTPUT

      - name: Create latest release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "${{needs.prepare.outputs.tag}}" --title "${{needs.prepare.outputs.tag}}.${{ steps.vars.outputs.hash }}" --notes "Latest ${{needs.prepare.outputs.tag}}.${{ steps.vars.outputs.hash }}" --repo geerteltink/zed-windows --latest target\release\zed.exe
