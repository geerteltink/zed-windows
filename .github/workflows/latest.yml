name: Build latest release

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      tag_exists: ${{ steps.tag_exists.outputs.tag_exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tag from remote
        id: vars
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_TAG=$(gh release list --limit 1 --repo zed-industries/zed --exclude-drafts --exclude-pre-releases --json tagName --jq '.[0].tagName')
          echo "Latest tag: $LATEST_TAG"
          echo "tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"

      - name: Check if latest tag exists
        id: tag_exists
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG_EXISTS=$(git tag -l "${{ steps.vars.outputs.tag }}")
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag exists."
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Tag does not exist."
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    runs-on: windows-latest
    needs: prepare
    if: needs.prepare.outputs.tag_exists == 'false'
    steps:
      - run: echo "Building ${{needs.prepare.outputs.tag}}"

      - name: Enable long paths in Git
        run: git config --system core.longpaths true

      - name: Enable long paths in Windows
        shell: pwsh
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Switch to branch
        uses: actions/checkout@v4

      - name: Checkout Zed
        uses: actions/checkout@v4
        with:
          repository: zed-industries/zed
          ref: ${{needs.prepare.outputs.tag}}
          path: zed

      - name: Configure build for ARM64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64

      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          targets: aarch64-pc-windows-msvc

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.backend }}
          workspaces: "zed -> target"

      - name: Build project
        working-directory: zed
        shell: pwsh
        env:
          ZED_BUNDLE: "true"
          RELEASE_VERSION: ${{needs.prepare.outputs.tag}}
          CARGO_PROFILE_RELEASE_DEBUG: "false"
          RUSTFLAGS: "-C symbol-mangling-version=v0 --cfg tokio_unstable --cfg windows_slim_errors -C target-feature=+crt-static --cfg gles"
        run: cargo build --release --target aarch64-pc-windows-msvc

      - name: Get vars
        id: vars
        run: |
          $HASH = (git rev-parse HEAD).Substring(0,9)
          echo "HASH: ${HASH}"
          Write-Output "hash=${HASH}" >> $Env:GITHUB_OUTPUT

      - name: Create latest release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "${{needs.prepare.outputs.tag}}" --title "${{needs.prepare.outputs.tag}}.${{ steps.vars.outputs.hash }}" --notes "Latest ${{needs.prepare.outputs.tag}}.${{ steps.vars.outputs.hash }}" --repo geerteltink/zed-windows --latest zed\target\release\zed.exe
